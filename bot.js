const TelegramBot = require("node-telegram-bot-api");
const config = require("./config");
const cron = require("node-cron");
const {
    getDataFromSheet,
    appendDataToSheet,
    getNextFreeRow,
    getUserGoals,
    updateUserGoals,
    getUserRowIndex,
    formatDateForKiev,
    updateDataInSheet,
    checkUserExists,
    unloadDataToAll,
} = require("./sheets");

const ADMIN_USER_ID = 239415373;

const bot = new TelegramBot(config.botToken, { polling: true });
let registeredUsers = {};
let reminderTasks = {};
let awaitingComment = {};

// –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
bot.on("polling_error", (error) => {
    console.error(`Polling error: ${error.message}`);
    registeredUsers = {};
    reminderTasks = {};
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const firstName = msg.chat.first_name;
    const userId = chatId.toString();

    try {
        const userExists = await checkUserExists(
            config.spreadsheetId,
            userId,
            firstName
        );

        if (userExists) {
            bot.sendMessage(
                chatId,
                `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —Å –∏–º–µ–Ω–µ–º ${firstName} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`
            );
            sendWelcomeMessage(chatId, firstName);
            sendWelcomeButtons(chatId, firstName);
        } else {
            // –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â—É—é —Å–≤–æ–±–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
            const nextFreeRow = await getNextFreeRow(
                config.spreadsheetId,
                "Sheet1"
            );

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª–µ–¥—É—é—â—É—é —Å–≤–æ–±–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
            await appendDataToSheet(
                config.spreadsheetId,
                `Sheet1!A${nextFreeRow}:B${nextFreeRow}`,
                [userId, firstName]
            );

            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—ç—à
            registeredUsers[chatId] = true;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏
            sendWelcomeMessage(chatId, firstName);
            sendWelcomeButtons(chatId, firstName);
        }
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error}`);
        bot.sendMessage(
            chatId,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        );
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear_cache
bot.onText(/\/clear_cache/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (userId === ADMIN_USER_ID) {
        registeredUsers = {};
        reminderTasks = {};
        bot.sendMessage(chatId, "–ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω.");
    } else {
        bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
const enableReminder = async (chatId, reminderType, bot, reminderTasks) => {
    const reminderMap = {
        enable_daily_reminder: {
            schedule: "30 6,16 * * 1-5", // 9:30 AM –∏ 4:00 PM –ø–æ –ö–∏–µ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (UTC+3) —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –ø—è—Ç–Ω–∏—Ü—É
            message: "–¢–≤–æ–∏ —Ü–µ–ª–∏ –Ω–∞ –¥–µ–Ω—å üëáü§ò‚úåÔ∏è ",
            goalsCallback: "daily_goals",
            reminderMessage: "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ.",
        },
        enable_weekly_reminder: {
            schedule: "35 6 * * 1", // 9:35 AM –ø–æ –ö–∏–µ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (UTC+3) –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
            message: "–¢–≤–æ–∏ —Ü–µ–ª–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é üëáü§ò‚úåÔ∏è ",
            goalsCallback: "weekly_goals",
            reminderMessage: "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ.",
        },
        enable_monthly_reminder: {
            schedule: "40 6 1-7 * *", // 9:40 AM –ø–æ –ö–∏–µ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (UTC+3) –≤ –ø–µ—Ä–≤—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞
            message: "–¢–≤–æ–∏ —Ü–µ–ª–∏ –Ω–∞ –º–µ—Å—è—Ü üëáü§ò‚úåÔ∏è ",
            goalsCallback: "monthly_goals",
            reminderMessage: "–ï–∂–µ–º–µ—Å—è—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ.",
        },
    };

    if (reminderMap[reminderType]) {
        const reminder = reminderMap[reminderType];

        try {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
            const task = cron.schedule(reminder.schedule, async () => {
                try {
                    const goals = await getUserGoals(
                        config.spreadsheetId,
                        chatId,
                        reminder.goalsCallback
                    );
                    const formattedGoals = goals
                        .map((goal, index) => `${index + 1}. ${goal}`)
                        .join("\n");
                    bot.sendMessage(
                        chatId,
                        `${reminder.message}:\n\n${formattedGoals}`
                    );
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: ${error}`);
                    bot.sendMessage(
                        chatId,
                        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    );
                }
            });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É
            reminderTasks[chatId] = reminderTasks[chatId] || {};
            reminderTasks[chatId][reminderType] = task;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"
            bot.sendMessage(chatId, reminder.reminderMessage, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",
                                callback_data: "add_comment",
                            },
                        ],
                    ],
                },
            });

            return task;
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${error}`);
            bot.sendMessage(
                chatId,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            );
            return null;
        }
    } else {
        console.error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${reminderType}`);
        bot.sendMessage(
            chatId,
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        );
        return null;
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
const disableReminder = (chatId, reminderType) => {
    if (reminderTasks[chatId] && reminderTasks[chatId][reminderType]) {
        reminderTasks[chatId][reminderType].stop();
        delete reminderTasks[chatId][reminderType];
        bot.sendMessage(chatId, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.");
    } else {
        bot.sendMessage(
            chatId,
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞."
        );
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
const handleAddComment = async (chatId, goalType) => {
    bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:");
    awaitingComment[chatId] = goalType;

    bot.once("message", async (msg) => {
        const comment = msg.text;
        const goalType = awaitingComment[chatId];

        if (!goalType) {
            bot.sendMessage(
                chatId,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            );
            return;
        }

        try {
            const currentGoals =
                (
                    await getUserGoals(config.spreadsheetId, chatId, goalType)
                )[0] || "";
            const now = new Date().toISOString();
            const kievDateTime = formatDateForKiev(now);

            await updateUserGoals(
                config.spreadsheetId,
                chatId,
                goalType,
                currentGoals,
                comment
            );

            const commentColumnMap = {
                daily_goals: `L${await getUserRowIndex(
                    config.spreadsheetId,
                    chatId
                )}`,
                weekly_goals: `M${await getUserRowIndex(
                    config.spreadsheetId,
                    chatId
                )}`,
                monthly_goals: `N${await getUserRowIndex(
                    config.spreadsheetId,
                    chatId
                )}`,
            };
            await updateDataInSheet(
                config.spreadsheetId,
                commentColumnMap[goalType],
                [kievDateTime]
            );

            bot.sendMessage(
                chatId,
                `–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Ü–µ–ª–µ–π –Ω–∞ ${goalType} —Å–æ—Ö—Ä–∞–Ω–µ–Ω.`
            );
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: ${error}`);
            bot.sendMessage(
                chatId,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            );
        } finally {
            delete awaitingComment[chatId];
        }
    });
};

const sendWelcomeMessage = (chatId, firstName) => {
    bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, ${firstName} üëå!`);
};

const sendWelcomeButtons = (chatId, firstName) => {
    bot.sendMessage(chatId, `–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ü–µ–ª–µ–π: ‚úèÔ∏è‚úçÔ∏è`, {
        reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: "–¶–µ–ª–∏ –Ω–∞ –¥–µ–Ω—å ",
                        callback_data: "daily_goals",
                    },
                    {
                        text: "–¶–µ–ª–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é ",
                        callback_data: "weekly_goals",
                    },
                    {
                        text: "–¶–µ–ª–∏ –Ω–∞ –º–µ—Å—è—Ü ",
                        callback_data: "monthly_goals",
                    },
                ],
            ],
        },
    });
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query
bot.on("callback_query", async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;

    switch (data) {
        case "daily_goals":
            const dailyGoals = await getUserGoals(
                config.spreadsheetId,
                chatId,
                "daily_goals"
            );
            const dailyGoalsMessage = `–¢–≤–æ–∏ —Ü–µ–ª–∏ –Ω–∞ –¥–µ–Ω—å ‚úÖ:\n\n${dailyGoals
                .map((goal, index) => `${index + 1}. ${goal}`)
                .join("\n")}`;
            bot.sendMessage(chatId, dailyGoalsMessage, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: "–í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
                                callback_data: "enable_daily_reminder",
                            },
                            {
                                text: "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                                callback_data: "add_comment",
                            },
                        ],
                    ],
                },
            });
            break;
        case "weekly_goals":
            const weeklyGoals = await getUserGoals(
                config.spreadsheetId,
                chatId,
                "weekly_goals"
            );
            const weeklyGoalsMessage = `–¢–≤–æ–∏ —Ü–µ–ª–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é ‚úÖ:\n\n${weeklyGoals
                .map((goal, index) => `${index + 1}. ${goal}`)
                .join("\n")}`;
            bot.sendMessage(chatId, weeklyGoalsMessage, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: "–í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
                                callback_data: "enable_weekly_reminder",
                            },
                            {
                                text: "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                                callback_data: "add_comment",
                            },
                        ],
                    ],
                },
            });
            break;
        case "monthly_goals":
            const monthlyGoals = await getUserGoals(
                config.spreadsheetId,
                chatId,
                "monthly_goals"
            );
            const monthlyGoalsMessage = `–¢–≤–æ–∏ —Ü–µ–ª–∏ –Ω–∞ –º–µ—Å—è—Ü ‚úÖ:\n\n${monthlyGoals
                .map((goal, index) => `${index + 1}. ${goal}`)
                .join("\n")}`;
            bot.sendMessage(chatId, monthlyGoalsMessage, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: "–í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
                                callback_data: "enable_monthly_reminder",
                            },
                            {
                                text: "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                                callback_data: "add_comment",
                            },
                        ],
                    ],
                },
            });
            break;
        case "enable_daily_reminder":
            enableReminder(chatId, "enable_daily_reminder", bot, reminderTasks);
            break;
        case "enable_weekly_reminder":
            enableReminder(
                chatId,
                "enable_weekly_reminder",
                bot,
                reminderTasks
            );
            break;
        case "enable_monthly_reminder":
            enableReminder(
                chatId,
                "enable_monthly_reminder",
                bot,
                reminderTasks
            );
            break;
        case "add_comment":
            bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:", {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: "–î–µ–Ω—å",
                                callback_data: "comment_daily",
                            },
                            {
                                text: "–ù–µ–¥–µ–ª—è",
                                callback_data: "comment_weekly",
                            },
                            {
                                text: "–ú–µ—Å—è—Ü",
                                callback_data: "comment_monthly",
                            },
                        ],
                    ],
                },
            });
            break;
        case "comment_daily":
            await handleAddComment(chatId, "daily_goals");
            break;
        case "comment_weekly":
            await handleAddComment(chatId, "weekly_goals");
            break;
        case "comment_monthly":
            await handleAddComment(chatId, "monthly_goals");
            break;
        default:
            break;
    }

    bot.answerCallbackQuery(callbackQuery.id);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("message", (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (awaitingComment[chatId]) {
        // –ï—Å–ª–∏ –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, —Ç–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ handleAddComment
        return;
    }

    if (!text.startsWith("/")) {
        bot.sendMessage(chatId, "–û–π-–æ–π-–æ–π, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã ü§∑‚Äç‚ôÄÔ∏èü§∑‚Äç‚ôÄÔ∏èü§∑‚Äç‚ôÄÔ∏è");
    }
});

bot.onText(/\/unload/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (userId === ADMIN_USER_ID) {
        try {
            // –í—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Sheet1 –≤ all
            await unloadDataToAll(config.spreadsheetId);
            bot.sendMessage(chatId, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–≥—Ä—É–∂–µ–Ω—ã –≤ –ª–∏—Å—Ç all.");
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: ${error}`);
            bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö.");
        }
    } else {
        bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");
    }
});
